#!/bin/bash
# Git helper for iPhone (iOS/Xcode) projects
# Save this file and run: bash ./iphone_git_helpers.sh <command>
# Commands: init, gitignore, add-remote <url>, commit "msg", branch <name>, push <remote> <branch>, tag <name>, stash-save "msg", stash-pop, lfs-track, status, file-log <path>

set -e

cmd="$1"
shift || true

write_gitignore() {
    cat > .gitignore <<'EOF'
# Xcode
build/
DerivedData/
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
xcuserdata/
*.moved-aside
*.xcuserstate

# Workspace
xcworkspace/
Pods/
Carthage/Build/
fastlane/report.xml
fastlane/Preview.html

# Swift Package Manager
.build/
Package.resolved

# CocoaPods
Pods/
# Carthage
Carthage/Build/

# Archives and installers
*.ipa
*.dSYM
*.xcarchive

# Certificates, keys
*.cer
*.p12
*.mobileprovision

# Secrets
.env
*.xcconfig

# macOS
.DS_Store

# Editor settings
.idea/
*.swp
EOF
    echo ".gitignore created"
}

init_repo() {
    if [ -d .git ]; then
        echo "Repository already initialized"
        return
    fi
    git init
    git config user.name "${GIT_USER:-Your Name}"
    git config user.email "${GIT_EMAIL:-you@example.com}"
    echo "Initialized empty git repository"
}

add_remote() {
    remote_url="$1"
    if [ -z "$remote_url" ]; then
        echo "Usage: add-remote <url>"
        exit 1
    fi
    git remote add origin "$remote_url"
    echo "Remote 'origin' set to $remote_url"
}

initial_commit() {
    git add -A
    git commit -m "${1:-Initial commit}"
    echo "Initial commit created"
}

create_branch() {
    branch="$1"
    [ -z "$branch" ] && { echo "Usage: branch <name>"; exit 1; }
    git checkout -b "$branch"
    echo "Created and switched to branch $branch"
}

push_branch() {
    remote="${1:-origin}"
    branch="${2:-$(git rev-parse --abbrev-ref HEAD)}"
    git push -u "$remote" "$branch"
    echo "Pushed $branch to $remote"
}

create_tag() {
    tag="$1"
    message="${2:-Release $tag}"
    [ -z "$tag" ] && { echo "Usage: tag <name> [message]"; exit 1; }
    git tag -a "$tag" -m "$message"
    git push origin "$tag"
    echo "Tag $tag created and pushed"
}

stash_save() {
    msg="${1:-WIP}"
    git stash push -m "$msg"
    echo "Stashed changes: $msg"
}

stash_pop() {
    git stash pop
    echo "Applied most recent stash"
}

lfs_track() {
    # Requires git-lfs installed: https://git-lfs.github.com/
    git lfs install --skip-smudge || true
    # Common large file patterns for iOS projects
    git lfs track "*.xcarchive"
    git lfs track "*.ipa"
    git lfs track "*.dSYM"
    git lfs track "*.xcassets"
    git add .gitattributes
    echo "Configured git-lfs tracking for common iOS artifacts. Commit .gitattributes."
}

status() {
    git status --short --branch
}

file_log() {
    path="$1"
    [ -z "$path" ] && { echo "Usage: file-log <path>"; exit 1; }
    git log --follow --pretty=format:'%h %ad %an %s' --date=short -- "$path"
}

# Dispatch
case "$cmd" in
    init) init_repo ;;
    gitignore) write_gitignore ;;
    "add-remote") add_remote "$@" ;;
    commit) initial_commit "$*" ;;
    branch) create_branch "$1" ;;
    push) push_branch "$1" "$2" ;;
    tag) create_tag "$1" "$2" ;;
    stash-save) stash_save "$*" ;;
    stash-pop) stash_pop ;;
    lfs-track) lfs_track ;;
    status) status ;;
    file-log) file_log "$1" ;;
    *) 
        echo "Available commands: init, gitignore, add-remote <url>, commit \"msg\", branch <name>, push <remote> <branch>, tag <name>, stash-save \"msg\", stash-pop, lfs-track, status, file-log <path>"
        exit 1
        ;;
esac